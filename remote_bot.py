import os
import sys
import logging
import subprocess
import time
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    filters,
    MessageHandler,
    ConversationHandler
)
import pyautogui
import io
import psutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
TOKEN = "7778814875:AAHMFjDtwjiac_Kd6UcZ2ftxGqb-b1PKY7U"
AUTHORIZED_USERS = [5556436653]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_PROCESS_NAME = 1
WAITING_KEY_PRESS = 2
WAITING_KEY_COMBINATION = 3
WAITING_DELETE_CONFIRM = 4

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ü–ö

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/screenshot - –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
/deleteprocess - –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
/presskey - –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É
/hotkey - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à
/delete - –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞
"""
    await update.message.reply_text(help_text)

async def take_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        screenshot = pyautogui.screenshot()
        img_byte_arr = io.BytesIO()
        screenshot.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)
        
        await update.message.reply_photo(
            photo=img_byte_arr,
            caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def delete_process_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: notepad.exe):")
    return WAITING_PROCESS_NAME

async def delete_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    process_name = update.message.text.strip().lower()
    killed = []
    
    try:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'].lower() == process_name:
                proc.kill()
                killed.append(proc.info['name'])
        
        if killed:
            await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ {len(killed)}: {', '.join(killed)}")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã —Å –∏–º–µ–Ω–µ–º '{process_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
    
    return ConversationHandler.END

async def press_key_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: f, Enter, Escape, Space):")
    return WAITING_KEY_PRESS

async def press_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    key = update.message.text.strip()
    
    try:
        pyautogui.press(key)
        await update.message.reply_text(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏.")
    
    return ConversationHandler.END

async def hotkey_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à —á–µ—Ä–µ–∑ '+' (–Ω–∞–ø—Ä–∏–º–µ—Ä: ctrl+alt+delete, shift+a):")
    return WAITING_KEY_COMBINATION

async def hotkey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    combination = update.message.text.strip()
    
    try:
        keys = combination.split('+')
        pyautogui.hotkey(*keys)
        await update.message.reply_text(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combination}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞.")
    
    return ConversationHandler.END

async def delete_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –±–æ—Ç–∞ –∏ –∑–∞–ø–∏—Å–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )
    return WAITING_DELETE_CONFIRM

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.strip().upper() != "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ":
        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END
    
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        uninstall_script = os.path.join(current_dir, "uninstall.bat")
        
        with open(uninstall_script, "w", encoding="utf-8") as f:
            f.write(f"""
@echo off
echo –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...
timeout /t 3 /nobreak >nul

taskkill /f /im pythonw.exe >nul 2>&1
taskkill /f /im python.exe >nul 2>&1

rd /s /q "{current_dir}" >nul 2>&1
del "%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\RemoteAccessBot.lnk" >nul 2>&1
del "%~f0"
echo –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
            """)
        
        subprocess.Popen(['cmd.exe', '/c', uninstall_script], shell=True, creationflags=subprocess.CREATE_NO_WINDOW)
        await update.message.reply_text("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —É–¥–∞–ª–µ–Ω—ã!")
        time.sleep(2)
        os._exit(0)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

def main() -> None:
    logger.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑: {os.path.abspath(__file__)}")
    
    try:
        app = Application.builder().token(TOKEN).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", start))
        app.add_handler(CommandHandler("screenshot", take_screenshot))
        
        process_handler = ConversationHandler(
            entry_points=[CommandHandler('deleteprocess', delete_process_start)],
            states={
                WAITING_PROCESS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_process)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        key_handler = ConversationHandler(
            entry_points=[CommandHandler('presskey', press_key_start)],
            states={
                WAITING_KEY_PRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, press_key)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        hotkey_handler = ConversationHandler(
            entry_points=[CommandHandler('hotkey', hotkey_start)],
            states={
                WAITING_KEY_COMBINATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, hotkey)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        delete_handler = ConversationHandler(
            entry_points=[CommandHandler('delete', delete_bot)],
            states={
                WAITING_DELETE_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        
        app.add_handler(process_handler)
        app.add_handler(key_handler)
        app.add_handler(hotkey_handler)
        app.add_handler(delete_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
