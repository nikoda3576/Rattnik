import os
import shutil
import sys
import logging
import subprocess
import time
import json
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    filters,
    MessageHandler,
    ConversationHandler
)
import pyautogui
import io
import psutil
import pygetwindow as gw
import ctypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
TOKEN = "7778814875:AAHMFjDtwjiac_Kd6UcZ2ftxGqb-b1PKY7U"
AUTHORIZED_USERS = [5556436653]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_PROCESS_NAME, WAITING_KEY_PRESS, WAITING_KEY_COMBINATION, WAITING_DELETE_CONFIRM = range(4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
def move_to_pppython():
    target_dir = r"C:\pppython"
    current_file = os.path.abspath(__file__)
    target_file = os.path.join(target_dir, os.path.basename(current_file))
    
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
    
    if os.path.dirname(current_file).lower() == target_dir.lower():
        return False
    
    shutil.copy(current_file, target_file)
    logger.info(f"–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: {target_file}")
    
    subprocess.Popen([sys.executable, target_file])
    return True

if move_to_pppython():
    logger.info("–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—É—é –∫–æ–ø–∏—é...")
    sys.exit(0)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
def execute_special_hotkey(combination: str):
    combination = combination.lower()
    
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    if combination == "ctrl+alt+delete" or combination == "ctrl+alt+del":
        ctypes.windll.user32.LockWorkStation()
        return "–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    # –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á
    elif combination == "ctrl+shift+esc":
        os.system("taskmgr")
        return "–û—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á"
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–æ–Ω
    elif combination == "alt+tab":
        pyautogui.keyDown('alt')
        pyautogui.press('tab')
        pyautogui.keyUp('alt')
        return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–æ–Ω"
    
    # –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª
    elif combination == "win+d":
        pyautogui.hotkey('win', 'd')
        return "–ü–æ–∫–∞–∑–∞–Ω —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
    
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    admin_status = "‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_admin() else "‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)"
    
    help_text = f"""
ü§ñ –ë–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ü–ö
{admin_status}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/screenshot - –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
/deleteprocess - –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
/presskey - –ù–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É
/hotkey - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à
/delete - –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞

üî• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:
ctrl+alt+delete - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
ctrl+shift+esc - –î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á
alt+tab - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∫–æ–Ω
win+d - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
win+l - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä
"""
    await update.message.reply_text(help_text)

async def take_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    try:
        screenshot = pyautogui.screenshot()
        img_byte_arr = io.BytesIO()
        screenshot.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)
        
        await update.message.reply_photo(
            photo=img_byte_arr,
            caption="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def delete_process_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: notepad.exe):")
    return WAITING_PROCESS_NAME

async def delete_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    process_name = update.message.text.strip().lower()
    killed = []
    
    try:
        for proc in psutil.process_iter(['name']):
            if proc.info['name'].lower() == process_name:
                try:
                    proc.kill()
                    killed.append(proc.info['name'])
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        
        if killed:
            await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ {len(killed)}: {', '.join(killed)}")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã —Å –∏–º–µ–Ω–µ–º '{process_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
    
    return ConversationHandler.END

async def press_key_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞–≤–∏—à—É –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: f, Enter, Escape, Space):")
    return WAITING_KEY_PRESS

async def press_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    key = update.message.text.strip()
    
    try:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Enter
        if key.lower() == 'enter':
            key = 'enter'
        pyautogui.press(key)
        await update.message.reply_text(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏.")
    
    return ConversationHandler.END

async def hotkey_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    # –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    buttons = [
        ["Ctrl+Alt+Delete", "Ctrl+Shift+Esc"],
        ["Alt+Tab", "Win+D"],
        ["Win+L", "Custom"]
    ]
    reply_markup = {
        "keyboard": buttons,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    
    await update.message.reply_text(
        "‚å®Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é (—á–µ—Ä–µ–∑ '+'):",
        reply_markup=json.dumps(reply_markup)
    )
    return WAITING_KEY_COMBINATION

async def hotkey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    combination = update.message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        special_result = execute_special_hotkey(combination)
        if special_result:
            await update.message.reply_text(f"‚úÖ {special_result}")
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        keys = combination.split('+')
        pyautogui.hotkey(*keys)
        await update.message.reply_text(f"‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combination}")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        if "is not a valid key" in str(e):
            error_msg += "\n‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞–≤–∏—à"
        if not is_admin():
            error_msg += "\n‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"
        
        await update.message.reply_text(error_msg)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤–æ!",
        reply_markup=json.dumps({"remove_keyboard": True})
    )
    return ConversationHandler.END

async def delete_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.effective_chat.id not in AUTHORIZED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –±–æ—Ç–∞ –∏ –∑–∞–ø–∏—Å–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )
    return WAITING_DELETE_CONFIRM

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.strip().upper() != "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ":
        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END
    
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        uninstall_script = os.path.join(current_dir, "uninstall.bat")
        
        with open(uninstall_script, "w", encoding='utf-8') as f:
            f.write(f"""
@echo off
chcp 65001 > nul
echo –£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...
timeout /t 3 /nobreak >nul

taskkill /f /im pythonw.exe >nul 2>&1
rd /s /q "{current_dir}" >nul 2>&1

del "%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\PC_Remote_Bot.lnk" >nul 2>&1
del "%USERPROFILE%\\Desktop\\Telegram PC Bot.lnk" >nul 2>&1

echo –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
timeout /t 2 /nobreak >nul
del "%~f0"
""")
        
        subprocess.Popen(
            ['cmd.exe', '/c', uninstall_script],
            creationflags=subprocess.CREATE_NO_WINDOW
        )
        
        await update.message.reply_text("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        os._exit(0)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

def main() -> None:
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑: {os.path.abspath(__file__)}")
    
    try:
        app = Application.builder().token(TOKEN).build()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", start))
        app.add_handler(CommandHandler("screenshot", take_screenshot))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conv_handler_process = ConversationHandler(
            entry_points=[CommandHandler('deleteprocess', delete_process_start)],
            states={
                WAITING_PROCESS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_process)]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_user=True
        )
        
        conv_handler_presskey = ConversationHandler(
            entry_points=[CommandHandler('presskey', press_key_start)],
            states={
                WAITING_KEY_PRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, press_key)]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_user=True
        )
        
        conv_handler_hotkey = ConversationHandler(
            entry_points=[CommandHandler('hotkey', hotkey_start)],
            states={
                WAITING_KEY_COMBINATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, hotkey)]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_user=True
        )
        
        conv_handler_delete = ConversationHandler(
            entry_points=[CommandHandler('delete', delete_bot)],
            states={
                WAITING_DELETE_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete)]
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_user=True
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(conv_handler_process)
        app.add_handler(conv_handler_presskey)
        app.add_handler(conv_handler_hotkey)
        app.add_handler(conv_handler_delete)
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
